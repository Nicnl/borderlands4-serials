package varbit

import (
	"borderlands_4_serials/lib/bit"
	"borderlands_4_serials/lib/helpers"
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestReadVarBit(t *testing.T) {
	tests := []struct {
		bin      string
		expected uint32
		pos      int
	}{
		// Special case: the game parser seems to allow a zero bit count
		{"00000", 0, 5},

		{"10000 0", 0, 5 + 1},
		{"01000 00", 0, 5 + 2},
		{"11000 000", 0, 5 + 3},
		{"00100 0000", 0, 5 + 4},
		{"10100 00000", 0, 5 + 5},
		{"01100 000000", 0, 5 + 6},
		{"11100 0000000", 0, 5 + 7},
		{"00010 00000000", 0, 5 + 8},
		{"10010 000000000", 0, 5 + 9},
		{"01010 0000000000", 0, 5 + 10},
		{"11010 00000000000", 0, 5 + 11},
		{"00110 000000000000", 0, 5 + 12},
		{"10110 0000000000000", 0, 5 + 13},
		{"01110 00000000000000", 0, 5 + 14},
		{"11110 000000000000000", 0, 5 + 15},
		{"00001 0000000000000000", 0, 5 + 16},
		{"10001 00000000000000000", 0, 5 + 17},
		{"01001 000000000000000000", 0, 5 + 18},
		{"11001 0000000000000000000", 0, 5 + 19},
		{"00101 00000000000000000000", 0, 5 + 20},
		{"10101 000000000000000000000", 0, 5 + 21},
		{"01101 0000000000000000000000", 0, 5 + 22},
		{"11101 00000000000000000000000", 0, 5 + 23},
		{"00011 000000000000000000000000", 0, 5 + 24},
		{"10011 0000000000000000000000000", 0, 5 + 25},
		{"01011 00000000000000000000000000", 0, 5 + 26},
		{"11011 000000000000000000000000000", 0, 5 + 27},
		{"00111 0000000000000000000000000000", 0, 5 + 28},
		{"10111 00000000000000000000000000000", 0, 5 + 29},
		{"01111 000000000000000000000000000000", 0, 5 + 30},
		{"11111 0000000000000000000000000000000", 0, 5 + 31},

		{"10000 1", 1, 5 + 1},
		{"01000 10", 1, 5 + 2},
		{"11000 100", 1, 5 + 3},
		{"00100 1000", 1, 5 + 4},
		{"10100 10000", 1, 5 + 5},
		{"01100 100000", 1, 5 + 6},
		{"11100 1000000", 1, 5 + 7},
		{"00010 10000000", 1, 5 + 8},
		{"10010 100000000", 1, 5 + 9},
		{"01010 1000000000", 1, 5 + 10},
		{"11010 10000000000", 1, 5 + 11},
		{"00110 100000000000", 1, 5 + 12},
		{"10110 1000000000000", 1, 5 + 13},
		{"01110 10000000000000", 1, 5 + 14},
		{"11110 100000000000000", 1, 5 + 15},
		{"00001 1000000000000000", 1, 5 + 16},
		{"10001 10000000000000000", 1, 5 + 17},
		{"01001 100000000000000000", 1, 5 + 18},
		{"11001 1000000000000000000", 1, 5 + 19},
		{"00101 10000000000000000000", 1, 5 + 20},
		{"10101 100000000000000000000", 1, 5 + 21},
		{"01101 1000000000000000000000", 1, 5 + 22},
		{"11101 10000000000000000000000", 1, 5 + 23},
		{"00011 100000000000000000000000", 1, 5 + 24},
		{"10011 1000000000000000000000000", 1, 5 + 25},
		{"01011 10000000000000000000000000", 1, 5 + 26},
		{"11011 100000000000000000000000000", 1, 5 + 27},
		{"00111 1000000000000000000000000000", 1, 5 + 28},
		{"10111 10000000000000000000000000000", 1, 5 + 29},
		{"01111 100000000000000000000000000000", 1, 5 + 30},
		{"11111 1000000000000000000000000000000", 1, 5 + 31},

		{"10000 1", 1, 5 + 1},
		{"01000 01", 2, 5 + 2},
		{"11000 001", 4, 5 + 3},
		{"00100 0001", 8, 5 + 4},
		{"10100 00001", 16, 5 + 5},
		{"01100 000001", 32, 5 + 6},
		{"11100 0000001", 64, 5 + 7},
		{"00010 00000001", 128, 5 + 8},
		{"10010 000000001", 256, 5 + 9},
		{"01010 0000000001", 512, 5 + 10},
		{"11010 00000000001", 1024, 5 + 11},
		{"00110 000000000001", 2048, 5 + 12},
		{"10110 0000000000001", 4096, 5 + 13},
		{"01110 00000000000001", 8192, 5 + 14},
		{"11110 000000000000001", 16384, 5 + 15},
		{"00001 0000000000000001", 32768, 5 + 16},
		{"10001 00000000000000001", 65536, 5 + 17},
		{"01001 000000000000000001", 131072, 5 + 18},
		{"11001 0000000000000000001", 262144, 5 + 19},
		{"00101 00000000000000000001", 524288, 5 + 20},
		{"10101 000000000000000000001", 1048576, 5 + 21},
		{"01101 0000000000000000000001", 2097152, 5 + 22},
		{"11101 00000000000000000000001", 4194304, 5 + 23},
		{"00011 000000000000000000000001", 8388608, 5 + 24},
		{"10011 0000000000000000000000001", 16777216, 5 + 25},
		{"01011 00000000000000000000000001", 33554432, 5 + 26},
		{"11011 000000000000000000000000001", 67108864, 5 + 27},
		{"00111 0000000000000000000000000001", 134217728, 5 + 28},
		{"10111 00000000000000000000000000001", 268435456, 5 + 29},
		{"01111 000000000000000000000000000001", 536870912, 5 + 30},
		{"11111 0000000000000000000000000000001", 1073741824, 5 + 31},
	}

	for _, tt := range tests {
		t.Run(tt.bin, func(t *testing.T) {
			data := helpers.BinToBytes(tt.bin)
			br := bit.NewReader(data)
			val, err := Read(br)
			assert.NoError(t, err)
			assert.Equal(t, tt.expected, val)
			assert.Equal(t, tt.pos, br.Pos())
		})
	}
}
