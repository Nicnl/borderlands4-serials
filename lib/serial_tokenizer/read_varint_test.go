package serial_tokenizer

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func TestReadVarintNormal(t *testing.T) {
	var tests = []struct {
		bin      string
		expected uint32
		pos      int
	}{
		{"10000", 1, 5},
		{"01000", 2, 5},
		{"00100", 4, 5},
		{"00010", 8, 5},

		{"11110", 15, 5},
		{"01110", 14, 5},
		{"00110", 12, 5},

		{"00001 10000", 16, 10},
		{"00001 01000", 32, 10},
		{"00001 00100", 64, 10},
		{"00001 00010", 128, 10},

		{"00001 00001 10000", 256, 15},
		{"00001 00001 01000", 512, 15},
		{"00001 00001 00100", 1024, 15},
		{"00001 00001 00010", 2048, 15},

		{"00001 00001 00001 10000", 4096, 20},
		{"00001 00001 00001 01000", 8192, 20},
		{"00001 00001 00001 00100", 16384, 20},
		{"00001 00001 00001 00010", 32768, 20},

		// All zero
		{"00000", 0, 5},
		{"00001 00000", 0, 10},
		{"00001 00001 00000", 0, 15},
		{"00001 00001 00001 00000", 0, 20},
	}

	for _, tt := range tests {
		t.Run(tt.bin, func(t *testing.T) {
			data := binToBytes(tt.bin)
			tok := NewTokenizer(data)
			val, err := tok.readVarint()
			assert.NoError(t, err)
			assert.Equal(t, tt.expected, val)
			assert.Equal(t, tt.pos, tok.bs.Pos())
		})
	}
}

func TestReadVarintExtended(t *testing.T) {
	var tests = []struct {
		bin      string
		expected uint32
		pos      int
	}{
		{"00000000", 0, 8},
		{"10000000", 1, 8},
		{"01000000", 2, 8},
		{"00100000", 4, 8},
		{"00010000", 8, 8},
		{"00000100", 16, 8},
		{"00000010", 32, 8},
		{"00000001", 64, 8},
		{"11110111", 127, 8},

		{"00001000 00000", 0, 13},
		{"10001000 00000", 1, 13},
		{"01001000 00000", 2, 13},
		{"00101000 00000", 4, 13},
		{"00011000 00000", 8, 13},
		{"00001100 00000", 16, 13},
		{"00001010 00000", 32, 13},
		{"00001001 00000", 64, 13},
		{"00001000 10000", 128, 13},
		{"00001000 00100", 256, 13},
		{"00001000 00010", 512, 13},
		{"00001000 00001", 1024, 13},
		{"11111111 10111", 2047, 13},

		{"00001000 01000 00000", 0, 18},
		{"10001000 01000 00000", 1, 18},
		{"01001000 01000 00000", 2, 18},
		{"00101000 01000 00000", 4, 18},
		{"00011000 01000 00000", 8, 18},
		{"00001100 01000 00000", 16, 18},
		{"00001010 01000 00000", 32, 18},
		{"00001001 01000 00000", 64, 18},
		{"00001000 11000 00000", 128, 18},
		{"00001000 01100 00000", 256, 18},
		{"00001000 01010 00000", 512, 18},
		{"00001000 01001 00000", 1024, 18},
		{"00001000 01000 10000", 2048, 18},
		{"00001000 01000 00100", 4096, 18},
		{"00001000 01000 00010", 8192, 18},
		{"00001000 01000 00001", 16384, 18},
		{"11111111 11111 10111", 32767, 18},

		{"00001000 01000 01000 00000", 0, 23},
		{"10001000 01000 01000 00000", 1, 23},
		{"01001000 01000 01000 00000", 2, 23},
		{"00101000 01000 01000 00000", 4, 23},
		{"00011000 01000 01000 00000", 8, 23},
		{"00001100 01000 01000 00000", 16, 23},
		{"00001010 01000 01000 00000", 32, 23},
		{"00001001 01000 01000 00000", 64, 23},
		{"00001000 11000 01000 00000", 128, 23},
		{"00001000 01100 01000 00000", 256, 23},
		{"00001000 01010 01000 00000", 512, 23},
		{"00001000 01001 01000 00000", 1024, 23},
		{"00001000 01000 11000 00000", 2048, 23},
		{"00001000 01000 01100 00000", 4096, 23},
		{"00001000 01000 01010 00000", 8192, 23},
		{"00001000 01000 01001 00000", 16384, 23},
		{"00001000 01000 01000 10000", 32768, 23},
		{"00001000 01000 01000 00100", 65536, 23},
		{"00001000 01000 01000 00010", 131072, 23},
		{"00001000 01000 01000 00001", 262144, 23},
		{"11111111 11111 11111 10111", 524287, 23},

		// 4th block is not read
		{"11111111 11111 11111 11111 11111", 524287, 23},
	}

	for _, tt := range tests {
		t.Run(tt.bin, func(t *testing.T) {
			data := binToBytes(tt.bin)
			tok := NewTokenizer(data)
			val, err := tok.readVarintExtended()
			assert.NoError(t, err)
			assert.Equal(t, tt.expected, val)
			assert.Equal(t, tt.pos, tok.bs.Pos())
		})
	}
}
